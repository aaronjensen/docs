@startuml

participant "Message DB" as MDB
participant Consumer as C
participant Handler as H
participant EntityStore as S
participant EntityProjection as P
participant Entity as E

MDB <<- C : Retrieve batches\nof messages
note right of MDB #fcfcfc: get_category_messages(category_name, position)

C ->> H : Invoke all handlers registered\nin the consumer for each\nmessage retrieved, passing\nthe message as an argument

H ->> S : Retrieve entity
note right of H #fcfcfc: entity, stream_version = store.fetch(event_id, include: version)

MDB <<- S : Retrieve events from\nthe entity stream
note right of MDB #fcfcfc: get_stream_messages(stream_name, position)

S ->> P : Provide events to the\nprojection
note left of P #fcfcfc: project.(entity, events)

P ->> E : Apply event data to\nthe entity

H <<-- S : Return entity to\nthe handler

H ->> H : Determine whether message\nhas already been processed\n(idempotence)

alt message is ignored
  hnote over H #eeeeee: exit
end

H ->> H : Determine whether to\naccept or reject the message\nper business rules

alt message is rejected
  hnote over H #eeeeee: exit
end

MDB <<- H : Write resulting event to the\nmessage store
note over H #fcfcfc: write.(event, stream_name, expected_version: stream_version)
note right of MDB #fcfcfc: write_message(id, stream_name, type, data, metadata, expected_version)

hnote over H #eeeeee: exit

@enduml
