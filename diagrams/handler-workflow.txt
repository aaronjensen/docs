@startuml

participant "Message DB" as MDB
participant Consumer as C
participant Handler as H
participant EntityStore as S
participant EntityProjection as P
participant Entity as E

MDB <<- C : Retrieve batches\nof messages
note right of MDB #fcfcfc: get_category_messages(category_name, position)

C ->> H : Invoke all handlers registered\nin the consumer for each\nmessage retrieved, passing\nthe message as an argument

H ->> S : Retrieve entity
note right of H #fcfcfc: entity, stream_version = store.fetch(event_id, include: version)

MDB <<- S : Retrieve events from\nthe entity stream
note right of MDB #fcfcfc: get_stream_messages(stream_name, position)

S ->> P : Provide events to the\nprojection
note left of P #fcfcfc: project.(entity, events)

P --> E : Apply event data to\nthe entity

H <<-- S : Return entity to\nthe handler

H ->> H : Determine whether to\naccept or reject\nthe message

alt message is rejected
  hnote over H #eeeeee: exit
end

MDB <<- H : Write resulting event to the\nmessage store
note over H #fcfcfc: write.(event, stream_name, expected_version: stream_version)
note right of MDB #fcfcfc: write_message(id, stream_name, type, data, metadata, expected_version)



hnote over H #eeeeee: exit

/'
== Funds Transfer Initiation ==

note left of FT: Client writes Transfer command\nto Funds Transfer
->> FT : Transfer

note left of FT: Handle Transfer command

FT ->> FT : Fetch FundsTransfer entity
note left: Project the funds transfer's stream

FT ->> FT : Check if the funds transfer has already been initiated
note left: Idempotence check

alt funds transfer not yet initiated
  FT ->> FT : Initiated
  note left: Write Initiated event
else funds transfer already initiated
  FT ->> FT : Log ignored message and exit
  hnote over FT #eeeeee: exit
end

== Withdrawal ==

-->> FT : Initiated

FT ->> Acct : Withdraw
note left: Handle Initiated event and write\nWithdraw command to Account

Acct ->> Acct : Fetch Account entity
note right: Project the account's stream


Acct ->> Acct : Check if the message has been processed already
note right: Idempotence check

alt message has been processed already
  Acct ->> Acct : Log ignored message and exit
  hnote over Acct #eeeeee: exit
else message has not been processed already

  Acct ->> Acct : Check the Account entity's balance for sufficient funds

  alt sufficient funds
    Acct ->> Acct : Withdrawn
    note right: Write Withdrawn event

    Acct -->> FT : Withdrawn
    note left: Handle Account's Withdrawn event and\nwrite a local copy

    FT ->> FT : Withdrawn
  else insufficient funds
    Acct ->> Acct : WithdrawalRejected

    Acct -->> FT : WithdrawalRejected
    note left: Handle Account's WithdrawalRejected event and\nwrite a local copy
  end
end

== Deposit ==

-->> FT : Withdrawn

FT ->> Acct : Deposit
note left: Handle Withdrawn event and\nwrite Deposit command to Account

note right: Handle Deposit command

Acct ->> Acct : Fetch Account entity
note right: Project the account's stream

Acct ->> Acct : Check if the message has been processed already
note right: Idempotence check

alt message has been processed already
  Acct ->> Acct : Log ignored message and exit
  hnote over Acct #eeeeee: exit
else message has not been processed already
  Acct ->> Acct : Deposited
  note right: Write Deposited event

  Acct -->> FT : Deposited
  note left: Handle Account's Deposited event and\nwrite a local copy

  FT ->> FT : Deposited
end

== Funds Transfer Termination ==

-->> FT : Deposit
note left of FT: Handle Deposited event

FT ->> FT : Fetch FundsTransfer entity
note left: Project the funds transfer's stream

FT ->> FT : Check if the message has been processed already
note left: Idempotence check

alt message has been processed already
  FT ->> FT : Log ignored message and exit
  hnote over FT #eeeeee: exit
else message has not been processed already
  FT ->> FT : Transfered
  note left: Complete the funds transfer process\nby writing the Transfered event
end
'/

@enduml
